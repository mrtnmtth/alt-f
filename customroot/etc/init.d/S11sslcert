#!/bin/sh

DESC="Create SSL certificates"
NAME=sslcert
TYPE=required

SERRORL=/var/log/systemerror.log

MISC_CONF=/etc/misc.conf

BOX_CA_KEY=/etc/ssl/certs/rootCA.key
BOX_CA_CRT=/etc/ssl/certs/rootCA.crt

BOX_PEM=/etc/ssl/certs/server.pem
BOX_CRT=/etc/ssl/certs/server.crt
BOX_KEY=/etc/ssl/certs/server.key
BOX_CSR=/etc/ssl/certs/server.csr
BOX_CNF=/etc/ssl/server.cnf

. /etc/init.d/common

. $MISC_CONF

if test -z "$SSL_CERT_BITS"; then
	SSL_CERT_BITS=2048
	sed -i '/^SSL_CERT_BITS=/d' $MISC_CONF
	echo SSL_CERT_BITS=\"$SSL_CERT_BITS\" >> $MISC_CONF
fi

# FIXME: the certificate is generated when the host name is still a generic one,
# and a new one is not generated when the host name is changed.

case "$1" in
	start)

	echo -n "Starting $NAME: "

	eval $(ifconfig eth0 | awk '/inet addr/ { printf("hostip=%s netmask=%s", \
		substr($2, 6), substr($4, 6))}')
	eval $(ipcalc -n $hostip $netmask) # eval NETWORK

	export HOST=$(hostname) HOSTFQDN=$(hostname -f) HOSTIP=$(hostname -i) DOMAIN="$(hostname -d)"\
		BOX=$(cat /tmp/board) NETWORK="$NETWORK/$netmask" SSL_CERT_BITS
	
	# create the rootCA cert and key in one step
	if ! test -s $BOX_CA_CRT -a -s $BOX_CA_KEY; then
		echo -n "Creating Alt-F root CA to import on browsers..."
		REQNAME=req_dname_ca openssl req -x509 -new -nodes -sha256 -days 7300 \
			-newkey rsa -keyout $BOX_CA_KEY -out $BOX_CA_CRT \
			-extensions v3_ca -config $BOX_CNF
		# openssl rsa -des3 -in $BOX_CA_KEY -out $BOX_CA_KEY # FIXME should be passwd protected
		#cacreated=1
	fi
	
	# create a new CA signed certificate
	if test ! -s $BOX_CRT -o ! -s $BOX_KEY -o -n "$cacreated"; then
		# meanwhile the rootCA key might have been password protected...
		if openssl rsa -in $BOX_CA_KEY -noout -passin pass:$RANDOM >& /dev/null; then
			echo -n "Creating box certificate and signing it with the Alt-F rootCA..."
			# create box private key and sign request in one step
			REQNAME=req_dname openssl req -new -nodes -sha256 -newkey rsa \
				-keyout $BOX_KEY -out $BOX_CSR -config $BOX_CNF

			# CA sign the certificate sign request
			REQNAME=req_dname openssl x509 -req -days 365 -sha256 \
				-CA $BOX_CA_CRT -CAkey $BOX_CA_KEY -CAcreateserial \
				-in $BOX_CSR -out $BOX_CRT \
				-extensions v3_req -extfile $BOX_CNF
			cat $BOX_KEY $BOX_CRT > $BOX_PEM
		else
			emsg="The root CA key is password protected, can't create box certificate."
			echo -n "$emsg "
			echo "<li>$emsg</li>" >> $SERRORL
		fi
	fi

	# powerup, generate box pem, not saved on flash
	if test ! -s $BOX_PEM -a -s $BOX_CRT -a -s $BOX_KEY; then
			cat $BOX_KEY $BOX_CRT > $BOX_PEM
			touch -c -r $BOX_CRT $BOX_PEM
#	else # compatibility, only pem saved on flash. nope!
#		if ! test -s $BOX_CRT -o -s $BOX_KEY; then
# 			emsg="Reusing the box old certificate."
# 			echo -n "$emsg"
# 	 		echo "<li>$emsg</li>" >> $SERRORL
# 			sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p' $BOX_PEM > $BOX_CRT
# 			sed -n '/BEGIN .*PRIVATE KEY/,/END .*PRIVATE KEY/p' $BOX_PEM > $BOX_KEY
#		fi
	fi
	
	chmod og-w $BOX_CRT $BOX_KEY $BOX_CA_KEY $BOX_CA_CRT
	chmod og-rw $BOX_PEM $BOX_KEY $BOX_CA_KEY
	echo "OK."
	;;

	stop) echo "Stopping $NAME: OK." ;;
	status) echo "$NAME stopped"; exit 1 ;;
	restart) restart $NAME ;;
	*) echo Usage: $0 "start|stop|status|restart" ;;
esac

